name: on_tag
on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'  # Only build tag with semantic versioning format

permissions:
  contents: read

jobs:

  release:
    env:
      IMAGE_NAME: node-role-controller
      GO_VERSION: '1.25.0'
      COSIGN_VERSION: v2.5.0
      KIND_VERSION: '0.29.0'
      K8S_VERSION: '1.33.x'
      GO_LINTER_VERSION: 'v2.4.0'
      ERR_VULNERABILITY_SEV: 'CRITICAL,HIGH,MEDIUM'
      DEPLOYMENT_PATCH_FILE: deployment/overlays/dev/patch-deployment.yaml
      WORKER_NODE_COUNT: '2'
    outputs:
      image-uti: ${{ steps.build.outputs.image-uri }}
      image-name: ${{ steps.build.outputs.image-name }}
      image-digest: ${{ steps.build.outputs.image-digest }}
      cosign-version: ${{ env.COSIGN_VERSION }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      id-token: write
      packages: write
    steps:

    # build the image
    - uses: mchmarny/common/go-build@main
      id: build
      with:
        go-version: ${{ env.GO_VERSION }}
        image-uri: ${{ env.IMAGE_NAME }}
        release-version: ${{ github.ref_name }}
        main-path: main.go
        registry-username: ${{ github.actor }}
        registry-password: ${{ secrets.GITHUB_TOKEN }}

    # runt integration tests with kind
    - uses: chainguard-dev/actions/setup-kind@b1933e3d1f574c772dc7efd68c2060dafbc25e8c  # v1.4.9
      with:
        kind-version: ${{ env.KIND_VERSION }}
        k8s-version: ${{ env.K8S_VERSION }}
        kind-worker-count: "${{ env.WORKER_NODE_COUNT }}"
    - run: tests/set-dev-image ${{ steps.build.outputs.image-uri }} ${{ env.DEPLOYMENT_PATCH_FILE }}
    - run: tests/integration "${{ env.WORKER_NODE_COUNT }}"

    # scan the image for vulnerabilities
    - name: Scan Image
      uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4  # 0.32.0
      with:
        scan-type: image
        severity: ${{ env.ERR_VULNERABILITY_SEV }}
        image-ref: ${{ steps.build.outputs.image-uri }}
        github-pat: ${{ secrets.GITHUB_TOKEN }}
        format: sarif
        output: trivy-results.sarif
        hide-progress: true
        timeout: "10m"
        exit-code: "1"

  provenance:
    needs: [release]
    permissions:
      actions: read
      id-token: write
      packages: write
    if: startsWith(github.ref, 'refs/tags/')
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ needs.release.outputs.image-name }}
      digest: ${{ needs.release.outputs.image-digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  verification:
    needs: [release, provenance]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:

    - name: Install Cosign
      uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159  # v3.9.2
      with:
        cosign-release: ${{ needs.release.outputs.cosign-version }}

    - name: Auth Cosign
      shell: bash
      run: |
        cosign login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

    - name: Verify SLSA Provenance (cosign)
      shell: bash
      run: |
        cosign verify-attestation \
          --type slsaprovenance \
          --certificate-identity-regexp \
            "^https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@refs/tags/v[0-9]+.[0-9]+.[0-9]+$" \
          --certificate-oidc-issuer \
            https://token.actions.githubusercontent.com \
          --policy policy/provenance.cue \
          ${{ needs.release.outputs.image-uti }}

    - uses: slsa-framework/slsa-verifier/actions/installer@ea584f4502babc6f60d9bc799dbbb13c1caa9ee6  # v2.7.1

    - name: Verify SLSA Provenance (slsa-verifier)
      shell: bash
      run: |-
        slsa-verifier verify-image ${{ needs.release.outputs.image-uti }} \
          --source-uri "github.com/$GITHUB_REPOSITORY" \
          --source-tag "$GITHUB_REF_NAME"
